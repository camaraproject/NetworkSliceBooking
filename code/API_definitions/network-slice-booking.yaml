openapi: 3.0.3
info:
  title: Network Slice Booking
  description: |
    The Network Slice Booking (NSB) API provides programmable interface for developers to reserve a slice resource of a selected area within a period, and manage device access control as needed.
    For specific details, please refer to [Network Slice Booking API Design.md](/documentation/API_documentation/Network_Slice_Booking_API_Design.md).

    # Introduction

    This API allows the API consumer to book the availability of a session (also known as a "network slice"), specifying the service time, service area, and quality of service (QoS) profile.
    It checks whether the requested QoS profile can be guaranteed for the indicated time and area, and, if so, it reserves the network slice accordingly, and monitors that the slice delivers the QoS profile. The latter process is known as Service Level Agreement (SLA) monitoring.

    The API consumer can also retrieve information about an existing session or delete a session.

    # API functionality

    The API provides the following functionality:
    - Create a new session (network slice), specifying the service time, service area, and QoS profile.
    - Retrieve information about an existing session, including the service time, service area, and QoS profile.
    - Delete an existing session.

    # Request Parameters Definition:
    * **serviceTime**: is defined by a start time and an end time, which indicates the period during which the network slice will be reserved.
    * **serviceArea**: can be defined as a circle or a polygon, allowing for flexible geographical coverage.
    * **sliceQosProfile**: includes parameters such as maximum number of devices, downstream and upstream rate per device, and packet delay budget.
    * **sessionId**: is a unique identifier for the session, which is returned when a session is created and used to retrieve or delete the session later.

    # Authorization and authentication

    The "Camara Security and Interoperability Profile" provides details of how an API consumer requests an access token. Please refer to Identity and Consent Management (https://github.com/camaraproject/IdentityAndConsentManagement/) for the released version of the profile.

    The specific authorization flows to be used will be agreed upon during the onboarding process, happening between the API consumer and the API provider, taking into account the declared purpose for accessing the API, whilst also being subject to the prevailing legal framework dictated by local legislation.

    In cases where personal data is processed by the API and users can exercise their rights through mechanisms such as opt-in and/or opt-out, the use of three-legged access tokens is mandatory. This ensures that the API remains in compliance with privacy regulations, upholding the principles of transparency and user-centric privacy-by-design.

    # Additional CAMARA error responses

    The list of error codes in this API specification is not exhaustive. Therefore the API specification may not document some non-mandatory error statuses as indicated in `CAMARA API Design Guide`.

    Please refer to the `CAMARA_common.yaml` of the Commonalities Release associated to this API version for a complete list of error responses. The applicable Commonalities Release can be identified in the `API Readiness Checklist` document associated to this API version.

    As a specific rule, error `501 - NOT_IMPLEMENTED` can be only a possible error response if it is explicitly documented in the API.

  version: 0.1.0
  x-camara-commonalities: 0.6
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
externalDocs:
  description: Project documentation at CAMARA
  url: https://github.com/camaraproject/NetworkSliceBooking
servers:
  - url: "{apiRoot}/network-slice-booking/v0.1"
    variables:
      apiRoot:
        default: http://localhost:9100
        description: API root, defined by the service provider, e.g. `api.example.com` or `api.example.com/somepath`
tags:
  - name: Network Slice Booking Sessions
    description: Manage Network Slice Booking sessions
paths:
  /sessions:
    post:
      tags:
        - Network Slice Booking Sessions
      summary: Creates a new session
      description: |
        Create a new session (network slice) with the expected service time, service area, and QoS profile.

        NOTES:
        - If expected network slice resources are not available, the API consumer will receive an error response with code `422 - NETWORK_SLICE_BOOKING.RESOURCES_NOT_APPLICABLE`.
        - If session creation is successful, the API consumer will receive a response with code `201 - Created` and a session ID.
      operationId: createSession
      security:
        - openId:
            - network-slice-booking:sessions:create
      requestBody:
        description: Parameters to create a new session
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSession"
            examples:
              LOCATION_CIRCLE:
                $ref: "#/components/examples/RETRIEVAL_CIRCLE"
              LOCATION_POLYGON:
                $ref: "#/components/examples/RETRIEVAL_POLYGON"
        required: true

      responses:
        "201":
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionInfo"
              examples:
                RESPONSE_CIRCLE:
                  $ref: "#/components/examples/RESPONSE_CIRCLE"
                RESPONSE_POLYGON:
                  $ref: "#/components/examples/RESPONSE_POLYGON"
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "410":
          $ref: "#/components/responses/Generic410"
        "422":
          $ref: "#/components/responses/Generic422"
        "429":
          $ref: "#/components/responses/Generic429"

  /sessions/{sessionId}:
    delete:
      tags:
        - Network Slice Booking Sessions
      summary: Delete a NSB session
      description: |
        Release slice resources related to sessionId.

        NOTES:
        - The deletion operation takes effect immediately, e.g. if the session is deleted before the end of the service time, the service will end ahead of the scheduled time.
        - If the session is deleted, the API consumer will not be able to retrieve information about the session.
        - The deletion operation is idempotent, meaning that if the session is already deleted, the API consumer will receive a response with code `204 - No Content`.
      operationId: deleteSession
      security:
        - openId:
            - network-slice-booking:sessions:delete
      parameters:
        - name: sessionId
          in: path
          description: Session ID that was obtained from the createSession operation
          required: true
          schema:
            $ref: "#/components/schemas/SessionId"
      responses:
        "204":
          description: Session deleted
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "429":
          $ref: "#/components/responses/Generic429"

    get:
      tags:
        - Network Slice Booking Sessions
      summary: Get NSB session information
      description: |
        Querying for NSB session resource information details.

        NOTES:
        - According to sessionId, the API consumer can retrieve information about an existing session, including the service time, service area, and QoS profile.
        - If the session is deleted, the API consumer will receive a response with code `404 - Not Found`.
      operationId: getSession
      security:
        - openId:
            - network-slice-booking:sessions:get
      parameters:
        - name: sessionId
          in: path
          description: Session ID that was obtained from the createSession operation
          required: true
          schema:
            $ref: "#/components/schemas/SessionId"
      responses:
        "200":
          description: Contains information about active session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionInfo"
              examples:
                RESPONSE_CIRCLE:
                  $ref: "#/components/examples/RESPONSE_CIRCLE"
                RESPONSE_POLYGON:
                  $ref: "#/components/examples/RESPONSE_POLYGON"

        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "429":
          $ref: "#/components/responses/Generic429"

components:
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration

  parameters:
    x-correlator:
      name: x-correlator
      in: header
      description: Correlation id for the different services
      schema:
        $ref: "#/components/schemas/XCorrelator"

  headers:
    x-correlator:
      description: Correlation id for the different services
      schema:
        $ref: "#/components/schemas/XCorrelator"

  schemas:
    XCorrelator:
      description: Value for the x-correlator
      type: string
      pattern: ^[a-zA-Z0-9-_:;.\/<>{}]{0,256}$
      example: "b4333c46-49c0-4f62-80d7-f0ef930f1c46"
    SessionId:
      description: Session ID in UUID format
      type: string
      format: uuid
    SessionInfo:
      description: Session related information.
      allOf:
        - $ref: "#/components/schemas/CreateSession"
        - type: object
          properties:
            sessionId:
              $ref: "#/components/schemas/SessionId"
          required:
            - sessionId

    CreateSession:
      description: Attributes required to create a session
      type: object
      properties:
        serviceTime:
          description: |
            serviceTime is a period during which the network slice will be reserved.
            It is defined by a start time and an end time.
          allOf:
            - $ref: "#/components/schemas/TimePeriod"
        serviceArea:
          description: |
            serviceArea is a geographical area where the network slice will be reserved.
            It can be defined as a circle or a polygon.
          allOf:
            - $ref: "#/components/schemas/Area"
        sliceQosProfile:
          description: |
            sliceQosProfile is a set of quality of service parameters that define the requirements for the network slice.
            It includes parameters such as maximum number of devices, downlink and uplink throughput per device, and latency requirements.
          allOf:
            - $ref: "#/components/schemas/SliceQosProfile"
      required:
        - serviceTime
        - serviceArea
        - sliceQosProfile

    SliceQosProfile:
      description: |
        Quality of service for the network slice.
        It includes a set of predefined network slice performance characteristics.
      type: object
      properties:
        maxNumOfDevices:
          description: |
            maxNumOfDevices is a maximum number of devices that can be connected to the slice
          allOf:
            - $ref: "#/components/schemas/NumberOfDevices"
        downStreamRatePerDevice:
          description: |
            downStreamRatePerDevice is the maximum downstream rate allowed for each device connected to the slice.
            It indicates the individual device capability required for the slice.
          allOf:
            - $ref: "#/components/schemas/Rate"
        upStreamRatePerDevice:
          description: |
            upStreamRatePerDevice is the maximum upstream rate allowed for each device connected to the slice.
            It indicates the individual device capability required for the slice.
          allOf:
            - $ref: "#/components/schemas/Rate"
        downStreamDelayBudget:
          description: |
            downStreamDelayBudget is the maximum allowable downlink packet transmission latency (millisecond).
            By limiting the delay, the network can provide an acceptable level of performance for various services, such as voice calls, video streaming, and data.
          allOf:
            - $ref: "#/components/schemas/Duration"
        upStreamDelayBudget:
          description: |
            upStreamDelayBudget is the maximum allowable uplink packet transmission latency (millisecond).
            By limiting the delay, the network can provide an acceptable level of performance for various services, such as voice calls, video streaming, and data.
          allOf:
            - $ref: "#/components/schemas/Duration"


    Duration:
      description: Specification of duration. It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#appendix-A) for duration.
      type: object
      properties:
        value:
          description: Length of duration
          type: integer
          example: 12
          format: int32
          minimum: 1
        unit:
          $ref: "#/components/schemas/TimeUnitEnum"


    TimeUnitEnum:
      description: Units of time
      type: string
      enum:
        - Days
        - Hours
        - Minutes
        - Seconds
        - Milliseconds
        - Microseconds
        - Nanoseconds


    Rate:
      description: Specification of rate
      type: object
      properties:
        value:
          description: Quantity of rate
          type: integer
          example: 10
          format: int32
          minimum: 0
          maximum: 1024
        unit:
          $ref: "#/components/schemas/RateUnitEnum"

    RateUnitEnum:
      description: Units of rate
      type: string
      enum:
        - bps
        - kbps
        - Mbps
        - Gbps
        - Tbps

    NumberOfDevices:
      type: integer
      example: 5
      description: Maximum number of devices that is allowed to be connected to the network at any point in time.

      format: int32
      minimum: 1
      maximum: 20

    TimePeriod:
      properties:
        startDate:
          type: string
          format: date-time
          description: An instant of time, starting of the TimePeriod. It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
          example: "2024-06-01T12:00:00Z"
        endDate:
          type: string
          format: date-time
          description: An instant of time, ending of the TimePeriod. If not included, then the period has no ending date. It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
          example: "2024-06-02T12:00:00Z"
      required:
        - startDate

    Area:
      description: Base schema for all areas
      type: object
      properties:
        areaType:
          $ref: "#/components/schemas/AreaType"
      required:
        - areaType
      discriminator:
        propertyName: areaType
        mapping:
          CIRCLE: "#/components/schemas/Circle"
          POLYGON: "#/components/schemas/Polygon"

    AreaType:
      type: string
      description: |
        Type of this area.
        CIRCLE - The area is defined as a circle.
        POLYGON - The area is defined as a polygon.
      enum:
        - CIRCLE
        - POLYGON

    Circle:
      description: Circular area
      allOf:
        - $ref: "#/components/schemas/Area"
        - type: object
          required:
            - center
            - radius
          properties:
            center:
              $ref: "#/components/schemas/Point"
            radius:
              type: number
              description: Distance from the center in meters
              minimum: 1

    Polygon:
      description: Polygonal area. The Polygon should be a simple polygon, i.e. should not intersect itself.
      allOf:
        - $ref: "#/components/schemas/Area"
        - type: object
          required:
            - boundary
          properties:
            boundary:
              $ref: "#/components/schemas/PointList"

    PointList:
      description: List of points defining a polygon
      type: array
      items:
        $ref: "#/components/schemas/Point"
      minItems: 3
      maxItems: 15

    Point:
      type: object
      description: Coordinates (latitude, longitude) defining a location in a map
      required:
        - latitude
        - longitude
      properties:
        latitude:
          $ref: "#/components/schemas/Latitude"
        longitude:
          $ref: "#/components/schemas/Longitude"
      example:
        latitude: 31.22529
        longitude: 121.48905

    Latitude:
      description: Latitude component of a location
      type: number
      format: double
      minimum: -90
      maximum: 90

    Longitude:
      description: Longitude component of location
      type: number
      format: double
      minimum: -180
      maximum: 180

    ErrorInfo:
      description: Common schema for errors
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description
      required:
        - status
        - code
        - message
  responses:
    Generic400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
                      - OUT_OF_RANGE
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or query param.
            GENERIC_400_OUT_OF_RANGE:
              description: Out of Range. Specific Syntax Exception used when a given field has a pre-defined range or a invalid filter criteria combination is requested
              value:
                status: 400
                code: OUT_OF_RANGE
                message: Client specified an invalid range.
    Generic401:
      description: Unauthorized
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 401
                  code:
                    enum:
                      - UNAUTHENTICATED
          examples:
            GENERIC_401_UNAUTHENTICATED:
              description: Request cannot be authenticated and a new authentication is required
              value:
                status: 401
                code: UNAUTHENTICATED
                message: Request not authenticated due to missing, invalid, or expired credentials. A new authentication is required.

    Generic403:
      description: Forbidden
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 403
                  code:
                    enum:
                      - PERMISSION_DENIED
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: Permission denied. OAuth2 token access does not have the required scope or when the user fails operational security
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform this action.
    Generic404:
      description: Not found
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 404
                  code:
                    enum:
                      - NOT_FOUND
          examples:
            GENERIC_404_NOT_FOUND:
              description: Specified slice resource is not found based on the sessionId
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.
    Generic410:
      description: Gone
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 410
                  code:
                    enum:
                      - GONE
          examples:
            GENERIC_410_GONE:
              description: Use in notifications flow to allow API Consumer to indicate that its callback is no longer available
              value:
                status: 410
                code: GONE
                message: Access to the target resource is no longer available.
    Generic422:
      description: Unprocessable Content
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 422
                  code:
                    enum:
                      - NETWORK_SLICE_BOOKING.RESOURCES_NOT_APPLICABLE
          examples:
            NETWORK_SLICE_BOOKING_422_RESOURCES_NOT_APPLICABLE:
              description: Request cannot be processed due to business logic validation failure, e.g. service area is not supported or resources are insufficient
              value:
                status: 422
                code: NETWORK_SLICE_BOOKING.RESOURCES_NOT_APPLICABLE
                message: The request resources are not applicable for session creation.
    Generic429:
      description: Quota Exceed or Too Many Requests
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 429
                  code:
                    enum:
                      - QUOTA_EXCEEDED
                      - TOO_MANY_REQUESTS
          examples:
            GENERIC_429_QUOTA_EXCEEDED:
              description: Request is rejected due to exceeding a business quota limit
              value:
                status: 429
                code: QUOTA_EXCEEDED
                message: Out of resource quota.
            GENERIC_429_TOO_MANY_REQUESTS:
              description: Access to the API has been temporarily blocked due to rate or spike arrest limits being reached
              value:
                status: 429
                code: TOO_MANY_REQUESTS
                message: Rate limit reached.

  examples:
    RETRIEVAL_CIRCLE:
      value:
        serviceTime:
          startDate: "2024-06-01T12:00:00Z"
          endDate: "2024-06-02T12:00:00Z"
        serviceArea:
          areaType: CIRCLE
          center:
            latitude: 45.754114
            longitude: 4.860374
          radius: 800
        sliceQosProfile:
          maxNumOfDevices: 5
          downStreamRatePerDevice:
            value: 10
            unit: "bps"
          upStreamRatePerDevice:
            value: 10
            unit: "bps"
          downStreamDelayBudget:
            value: 12
            unit: "Milliseconds"
          upStreamDelayBudget:
            value: 12
            unit: "Milliseconds"
    RETRIEVAL_POLYGON:
      value:
        serviceTime:
          startDate: "2024-06-01T12:00:00Z"
          endDate: "2024-06-02T12:00:00Z"
        serviceArea:
          areaType: POLYGON
          boundary:
            - latitude: 45.754114
              longitude: 4.860374
            - latitude: 45.753845
              longitude: 4.863185
            - latitude: 45.753916
              longitude: 4.866531
            - latitude: 45.754116
              longitude: 4.876353
        sliceQosProfile:
          maxNumOfDevices: 5
          downStreamRatePerDevice:
            value: 10
            unit: "bps"
          upStreamRatePerDevice:
            value: 10
            unit: "bps"
          downStreamDelayBudget:
            value: 12
            unit: "Milliseconds"
          upStreamDelayBudget:
            value: 12
            unit: "Milliseconds"
    RESPONSE_CIRCLE:
      value:
        serviceTime:
          startDate: "2024-06-01T12:00:00Z"
          endDate: "2024-06-02T12:00:00Z"
        serviceArea:
          areaType: CIRCLE
          center:
            latitude: 45.754114
            longitude: 4.860374
          radius: 800
        sliceQosProfile:
          maxNumOfDevices: 5
          downStreamRatePerDevice:
            value: 10
            unit: "bps"
          upStreamRatePerDevice:
            value: 10
            unit: "bps"
          downStreamDelayBudget:
            value: 12
            unit: "Milliseconds"
          upStreamDelayBudget:
            value: 12
            unit: "Milliseconds"
        sessionId: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
    RESPONSE_POLYGON:
      value:
        serviceTime:
          startDate: "2024-06-01T12:00:00Z"
          endDate: "2024-06-02T12:00:00Z"
        serviceArea:
          areaType: POLYGON
          boundary:
            - latitude: 45.754114
              longitude: 4.860374
            - latitude: 45.753845
              longitude: 4.863185
            - latitude: 45.753916
              longitude: 4.866531
            - latitude: 45.754116
              longitude: 4.876353
        sliceQosProfile:
          maxNumOfDevices: 5
          downStreamRatePerDevice:
            value: 10
            unit: "bps"
          upStreamRatePerDevice:
            value: 10
            unit: "bps"
          downStreamDelayBudget:
            value: 12
            unit: "Milliseconds"
          upStreamDelayBudget:
            value: 12
            unit: "Milliseconds"
        sessionId: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
